Index: FaceRecognition/faceRecognition/test_tool.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from read_data import read_img_list, read_name_list\r\nfrom train_model import Model\r\nimport re\r\nimport numpy as np\r\n\r\n\r\n# 对原数据集子文件夹名称做简单处理\r\ndef handle_name_list(path):\r\n    name_list = read_name_list(path)\r\n    for i in range(0, len(name_list)):\r\n        name_list[i] = name_list[i].split(\"pins_\")[1].replace(\"_\", \" \")\r\n    return name_list\r\n\r\n\r\n# 打印分割线\r\ndef print_line(delim_char, times, on_top):\r\n    if on_top:\r\n        print(delim_char*times + \"\\n\")\r\n    else:\r\n        print(delim_char*times)\r\n\r\n\r\n# 获取测试数据集中所有图片的名称\r\ndef get_actual_res(name_list, path):\r\n    res = []\r\n\r\n    actual_name_list = read_name_list(path)\r\n    for i in range(0, len(actual_name_list)):\r\n        actual_name = re.split(r'\\d', actual_name_list[i])[0]\r\n        if actual_name in name_list:\r\n            res.append(actual_name)\r\n        else:\r\n            res.append('not find')\r\n\r\n    return res\r\n\r\n\r\n# 传入待测图片所在文件夹的路径，进行测试\r\ndef test_model(name_list, img_path):\r\n    model = Model()\r\n    model.load()\r\n\r\n    res_name = []\r\n    res_prob = []\r\n    # 获取模型人脸识别结果\r\n    img_list = read_img_list(img_path)\r\n    for img in img_list:\r\n        index, prob = model.predict(img)\r\n        res_name.append(name_list[index] if (index != -1) else 'not find')\r\n        res_prob.append(prob)\r\n\r\n    return res_name, res_prob\r\n\r\n\r\ndef eval_accuracy(test_list, actual_list, prob_list, predict_threshold):\r\n    n_r = 0                     # 正确识别人脸的数量\r\n    n_c = len(actual_list)      # 文件夹下图片总数\r\n\r\n    for k in range(0, n_c):\r\n        if test_list[k] == actual_list[k] and prob_list[k] >= predict_threshold:\r\n            n_r += 1\r\n\r\n    rate = '{:.2%}'.format(n_r / n_c)\r\n    if predict_threshold == 0:\r\n        print_line(\"=\", 20, True)\r\n    else:\r\n        print_line(\"*\", 20, True)\r\n    print(\"The accuracy rate is: \")\r\n    print(rate)\r\n    print(\"The prediction threshold is: \")\r\n    print(\"{:.2f}\".format(predict_threshold))\r\n    print()\r\n\r\n\r\nif __name__ == '__main__':\r\n    origin_img_path = 'D:\\\\大三上学期课件\\\\FaceRecognition\\\\FaceRecognition\\\\input\\\\pins-face-recognition\\\\105_classes_pins_dataset'\r\n    handle_img_path = '..\\\\pictures\\\\dataSet'\r\n\r\n    existing_name_list = handle_name_list(origin_img_path)\r\n    actual_res = get_actual_res(existing_name_list, handle_img_path)\r\n    test_res, test_res_prob = test_model(existing_name_list, handle_img_path)\r\n\r\n    for j in np.arange(0, 0.7, 0.1):\r\n        eval_accuracy(test_res, actual_res, test_res_prob, j)\r\n    print_line(\"=\", 20, False)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FaceRecognition/faceRecognition/test_tool.py b/FaceRecognition/faceRecognition/test_tool.py
--- a/FaceRecognition/faceRecognition/test_tool.py	(revision 0d65643b4c29fde322befa04e2b307510480ef32)
+++ b/FaceRecognition/faceRecognition/test_tool.py	(date 1669780948805)
@@ -48,7 +48,7 @@
         index, prob = model.predict(img)
         res_name.append(name_list[index] if (index != -1) else 'not find')
         res_prob.append(prob)
-
+    print(name_list)
     return res_name, res_prob
 
 
@@ -56,11 +56,13 @@
     n_r = 0                     # 正确识别人脸的数量
     n_c = len(actual_list)      # 文件夹下图片总数
 
+
     for k in range(0, n_c):
         if test_list[k] == actual_list[k] and prob_list[k] >= predict_threshold:
             n_r += 1
 
-    rate = '{:.2%}'.format(n_r / n_c)
+    #rate = '{:.2%}'.format(n_r / n_c)
+    rate=n_r/n_c
     if predict_threshold == 0:
         print_line("=", 20, True)
     else:
@@ -74,7 +76,7 @@
 
 if __name__ == '__main__':
     origin_img_path = 'D:\\大三上学期课件\\FaceRecognition\\FaceRecognition\\input\\pins-face-recognition\\105_classes_pins_dataset'
-    handle_img_path = '..\\pictures\\dataSet'
+    handle_img_path = '..\\pictures\\newdataset'
 
     existing_name_list = handle_name_list(origin_img_path)
     actual_res = get_actual_res(existing_name_list, handle_img_path)
Index: FaceRecognition/faceRecognition/train_model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from sklearn.svm._libsvm import predict_proba\r\n\r\nfrom dataSet import DataSet\r\nfrom keras.models import Sequential,load_model\r\nfrom keras.layers import Dense,Activation,Convolution2D,MaxPooling2D,Flatten,Dropout\r\nimport numpy as np\r\n\r\n\r\n# 建立一个基于CNN的人脸识别模型\r\nclass Model(object):\r\n    FILE_PATH = \"D:\\\\2022-Automated-test\\\\FaceRecognition\\\\model.keras\"  # 模型进行存储和读取的地方\r\n    IMAGE_SIZE = 128  # 模型接受的人脸图片是128*128的\r\n\r\n    def __init__(self):\r\n        self.model = None\r\n\r\n    # 读取实例化后的DataSet类作为进行训练的数据源\r\n    def read_trainData(self, dataset):\r\n        self.dataset = dataset\r\n\r\n    # 建立一个CNN模型，一层卷积、一层池化、一层卷积、一层池化、抹平之后进行全链接、最后进行分类\r\n    def build_model(self):\r\n        self.model = Sequential()\r\n        self.model.add(Convolution2D(filters=32, kernel_size=(5, 5), padding='same', input_shape=self.dataset.X_train.shape[1:]))\r\n\r\n        self.model.add(Activation('relu'))\r\n        self.model.add(\r\n            MaxPooling2D(\r\n                pool_size=(2, 2),\r\n                strides=(2, 2),\r\n                padding='same'\r\n            )\r\n        )\r\n\r\n        self.model.add(Convolution2D(filters=64, kernel_size=(5, 5), padding='same'))\r\n        self.model.add(Activation('relu'))\r\n        self.model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\r\n\r\n        self.model.add(Flatten())\r\n        self.model.add(Dense(512))\r\n        self.model.add(Activation('relu'))\r\n\r\n        self.model.add(Dense(self.dataset.num_classes))\r\n        self.model.add(Activation('softmax'))\r\n        self.model.summary()\r\n\r\n    # 进行模型训练的函数，具体的optimizer、loss可以进行不同选择\r\n    def train_model(self):\r\n        self.model.compile(\r\n            optimizer='adam',  # 有很多可选的optimizer，例如RMSprop,Adagrad\r\n            loss='categorical_crossentropy',  # 你可以选用squared_hinge作为loss看看哪个好\r\n            metrics=['accuracy'])\r\n\r\n        # epochs、batch_size为可调的参数，epochs为训练多少轮、batch_size为每次训练多少个样本\r\n        self.model.fit(self.dataset.X_train, self.dataset.Y_train, epochs=7, batch_size=20)\r\n\r\n    def evaluate_model(self):\r\n        print('\\nTesting---------------')\r\n        loss, accuracy = self.model.evaluate(self.dataset.X_test, self.dataset.Y_test)\r\n\r\n        print('test loss;', loss)\r\n        print('test accuracy:', accuracy)\r\n\r\n    def save(self, file_path=FILE_PATH):\r\n        print('Model Saved.')\r\n        self.model.save(file_path)\r\n\r\n    def load(self, file_path=FILE_PATH):\r\n        print('Model Loaded.')\r\n        self.model = load_model(file_path)\r\n\r\n    # 需要确保输入的img得是灰化之后（channel =1 )且 大小为IMAGE_SIZE的人脸图片\r\n    def predict(self, img):\r\n        img = img.reshape((1, 1, self.IMAGE_SIZE, self.IMAGE_SIZE))\r\n        img = img.astype('float32')\r\n        img = img / 255.0\r\n\r\n        result = self.model.predict(img)  # 测算一下该img属于某个label的概率\r\n        max_index = np.argmax(result)  # 找出概率最高的\r\n\r\n        return max_index, result[0][max_index]  # 第一个 参数为概率最高的label的index,第二个参数为对应概率\r\n\r\n\r\nif __name__ == '__main__':\r\n    dataset = DataSet(\"D:\\\\2022-Automated-test\\\\FaceRecognition\\\\pictures\")\r\n    model = Model()\r\n    model.read_trainData(dataset)\r\n    model.build_model()\r\n    model.train_model()\r\n    model.evaluate_model()\r\n    model.save()\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FaceRecognition/faceRecognition/train_model.py b/FaceRecognition/faceRecognition/train_model.py
--- a/FaceRecognition/faceRecognition/train_model.py	(revision 0d65643b4c29fde322befa04e2b307510480ef32)
+++ b/FaceRecognition/faceRecognition/train_model.py	(date 1669781410546)
@@ -1,14 +1,15 @@
 from sklearn.svm._libsvm import predict_proba
 
 from dataSet import DataSet
-from keras.models import Sequential,load_model
+from keras import Sequential
+from keras.models import load_model
 from keras.layers import Dense,Activation,Convolution2D,MaxPooling2D,Flatten,Dropout
 import numpy as np
 
 
 # 建立一个基于CNN的人脸识别模型
 class Model(object):
-    FILE_PATH = "D:\\2022-Automated-test\\FaceRecognition\\model.keras"  # 模型进行存储和读取的地方
+    FILE_PATH = "/FaceRecognition/model.h5"  # 模型进行存储和读取的地方
     IMAGE_SIZE = 128  # 模型接受的人脸图片是128*128的
 
     def __init__(self):
Index: FaceRecognition/faceRecognition/read_img.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport cv2\r\n\r\n\r\n#根据输入的文件夹绝对路径，将该文件夹下的所有指定suffix的文件读取存入一个list,该list的第一个元素是该文件夹的名字\r\ndef readAllImg(path,*suffix):\r\n    try:\r\n\r\n        s = os.listdir(path)\r\n        resultArray = []\r\n        fileName = os.path.basename(path)\r\n        resultArray.append(fileName)\r\n\r\n        for i in s:\r\n            if endwith(i, suffix):\r\n                document = os.path.join(path, i)\r\n                img = cv2.imread(document)\r\n                resultArray.append(img)\r\n\r\n\r\n    except IOError:\r\n        print(\"Error\")\r\n\r\n    else:\r\n        print(\"读取成功\")\r\n        return resultArray\r\n\r\n#输入一个字符串一个标签，对这个字符串的后续和标签进行匹配\r\ndef endwith(s,*endstring):\r\n   resultArray = map(s.endswith,endstring)\r\n   if True in resultArray:\r\n       return True\r\n   else:\r\n       return False\r\n\r\nif __name__ == '__main__':\r\n\r\n  result = readAllImg(\"F:\\Python\\2022-Automated-test\\FaceRecognitionModel\\dataset\\pins_Bill Gates\\Bill Gates0_496\",'.pgm')\r\n  print (result[0])\r\n  # cv2.namedWindow(\"Image\")\r\n  # cv2.imshow(\"Image\", result[1])\r\n  # cv2.waitKey(0)\r\n  # cv2.destroyAllWindows()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FaceRecognition/faceRecognition/read_img.py b/FaceRecognition/faceRecognition/read_img.py
--- a/FaceRecognition/faceRecognition/read_img.py	(revision 0d65643b4c29fde322befa04e2b307510480ef32)
+++ b/FaceRecognition/faceRecognition/read_img.py	(date 1669775186713)
@@ -35,7 +35,7 @@
 
 if __name__ == '__main__':
 
-  result = readAllImg("F:\Python\2022-Automated-test\FaceRecognitionModel\dataset\pins_Bill Gates\Bill Gates0_496",'.pgm')
+  result = readAllImg("E:\picturecollect\archive\lfw-funneled\lfw_funneled",'.pgm')
   print (result[0])
   # cv2.namedWindow("Image")
   # cv2.imshow("Image", result[1])
Index: FaceRecognition/faceRecognition/pick_face.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport cv2\r\nimport time\r\nfrom read_img import readAllImg\r\n\r\n#从源路径中读取所有图片放入一个list，然后逐一进行检查，把其中的脸扣下来，存储到目标路径中\r\ndef readPicSaveFace(sourcePath,objectPath,*suffix):\r\n    try:\r\n        #读取照片,注意第一个元素是文件名\r\n        resultArray=readAllImg(sourcePath,*suffix)\r\n\r\n        #对list中图片逐一进行检查,找出其中的人脸然后写到目标文件夹下\r\n\r\n        count = 1\r\n        face_cascade = cv2.CascadeClassifier('E:\\openCV\\opencv\\sources\\data\\haarcascades\\haarcascade_frontalface_alt.xml')\r\n        for i in resultArray:\r\n            if type(i) != str:\r\n\r\n              gray = cv2.cvtColor(i, cv2.COLOR_BGR2GRAY)\r\n              faces = face_cascade.detectMultiScale(gray, 1.3, 5)\r\n              for (x, y, w, h) in faces:\r\n\r\n                listStr = [str(int(time.time())), str(count)]  #以时间戳和读取的排序作为文件名称\r\n                fileName = ''.join(listStr)\r\n\r\n                f = cv2.resize(gray[y:(y + h), x:(x + w)], (200, 200))\r\n                cv2.imwrite(objectPath+os.sep+'%s.jpg' % fileName, f)\r\n                count += 1\r\n\r\n\r\n    except IOError:\r\n        print(\"Error\")\r\n\r\n    else:\r\n        print('Already read '+str(count-1)+' Faces to Destination '+objectPath)\r\n\r\nif __name__ == '__main__':\r\n     readPicSaveFace('D:\\myProject\\pictures\\source-jerry','D:\\myProject\\pictures\\picTest','.jpg','.JPG','png','PNG')\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FaceRecognition/faceRecognition/pick_face.py b/FaceRecognition/faceRecognition/pick_face.py
--- a/FaceRecognition/faceRecognition/pick_face.py	(revision 0d65643b4c29fde322befa04e2b307510480ef32)
+++ b/FaceRecognition/faceRecognition/pick_face.py	(date 1669775976665)
@@ -12,7 +12,7 @@
         #对list中图片逐一进行检查,找出其中的人脸然后写到目标文件夹下
 
         count = 1
-        face_cascade = cv2.CascadeClassifier('E:\openCV\opencv\sources\data\haarcascades\haarcascade_frontalface_alt.xml')
+        face_cascade = cv2.CascadeClassifier('C:\\Users\\Lenovo\\AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\cv2\\data\\haarcascade_frontalface_alt.xml')
         for i in resultArray:
             if type(i) != str:
 
@@ -35,7 +35,7 @@
         print('Already read '+str(count-1)+' Faces to Destination '+objectPath)
 
 if __name__ == '__main__':
-     readPicSaveFace('D:\myProject\pictures\source-jerry','D:\myProject\pictures\picTest','.jpg','.JPG','png','PNG')
+     readPicSaveFace('E:\\picturecollect\\rawotherpeople','..\\pictures\\otherpeople','.jpg','.JPG','png','PNG')
 
 
 
